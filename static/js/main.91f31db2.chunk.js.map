{"version":3,"sources":["utils.js","App.js","index.js"],"names":["NOTES","NOTES_COUNT","length","SCALES","name","pattern","getLabelForNote","noteIndex","TUNING","App","useState","scale","setScale","root","setRoot","frets","map","startNote","notes","scalePattern","note","includes","filterNotesByScale","fretsCount","index","push","getNotesForFrets","console","log","value","onChange","event","Number","target","className","_","stringIndex","slice","fretIndex","ReactDOM","render","document","getElementById"],"mappings":"6NAAaA,EAAQ,CACnB,IACA,KACA,IACA,KACA,IACA,IACA,KACA,IACA,KACA,IACA,KACA,IACA,MAGWC,EAAcD,EAAME,OAKpBC,EAAS,CACpB,CACEC,KAAM,QACNC,QALY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAOjC,CACED,KAAM,iBACNC,QAVqB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MAc/BC,EAAkB,SAAAC,GAC7B,OAAOP,EAAMO,ICpBTC,G,KAAS,CAAC,EAAG,GAAI,EAAG,EAAG,EAAG,IA8DjBC,EA3DH,WAAO,IAAD,EACUC,mBAAS,GADnB,mBACTC,EADS,KACFC,EADE,OAEQF,mBAAS,GAFjB,mBAETG,EAFS,KAEHC,EAFG,KAIRT,EAAYF,EAAOQ,GAAnBN,QAEFU,EAAQP,EAAOQ,KAAI,SAAAC,GAAS,ODcF,SAACC,EAAOC,GACxC,OAAOD,EAAMF,KAAI,SAAAI,GAAI,OAAKD,EAAaE,SAASD,GAAQA,EAAO,QCd7DE,CDiB4B,SAACL,EAAWM,GAG1C,IAFA,IAAML,EAAQ,GAELM,EAAQ,EAAGA,EAAQD,EAAa,EAAGC,IAC1CN,EAAMO,MAAMD,EAAQP,IAAchB,EAAc,IAGlD,OAAOiB,ECvBHQ,CAAiBT,EAVH,IAWdZ,EAAQW,KAAI,SAAAI,GAAI,OAAKA,EAAOP,IAASZ,EAAc,OACnDe,IAAIV,MAGR,OADAqB,QAAQC,IAAIjB,EAAOE,GAEjB,oCACE,4BACEgB,MAAOlB,EACPmB,SAAU,SAAAC,GAAK,OAAInB,EAASoB,OAAOD,EAAME,OAAOJ,UAE/C1B,EAAOa,KAAI,WAAWQ,GAAX,IAAGpB,EAAH,EAAGA,KAAH,OACV,4BAAQyB,MAAOL,GAAQpB,OAI3B,4BACEyB,MAAOhB,EACPiB,SAAU,SAAAC,GAAK,OAAIjB,EAAQkB,OAAOD,EAAME,OAAOJ,UAE9C7B,EAAMgB,KAAI,SAACI,EAAMI,GAAP,OACT,4BAAQK,MAAOL,GAAQJ,OAI3B,yBAAKc,UAAW,SACd,yBAAKA,UAAW,QACb1B,EAAOQ,KAAI,SAACmB,EAAGC,GAAJ,OACV,yBAAKF,UAAW,QACd,yBAAKA,UAAW,SACb5B,EAAgBE,EAAO4B,UAM/BrB,EAAM,GAAGsB,MAAM,GAAGrB,KAAI,SAACmB,EAAGG,GAAJ,OACrB,yBAAKJ,UAAW,QACbnB,EAAMC,KAAI,SAACmB,EAAGC,GAAJ,OACT,yBAAKF,UAAW,QACd,yBAAKA,UAAW,SACbnB,EAAMqB,GAAaE,EAAY,e,MC1DlDC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.91f31db2.chunk.js","sourcesContent":["export const NOTES = [\r\n  \"C\",\r\n  \"C#\",\r\n  \"D\",\r\n  \"D#\",\r\n  \"E\",\r\n  \"F\",\r\n  \"F#\",\r\n  \"G\",\r\n  \"G#\",\r\n  \"A\",\r\n  \"A#\",\r\n  \"B\",\r\n  \"B#\"\r\n];\r\n\r\nexport const NOTES_COUNT = NOTES.length;\r\n\r\nconst C_HARMONIC_MINOR = [0, 2, 3, 5, 7, 8, 11];\r\nconst C_MINOR = [0, 2, 3, 5, 7, 8, 10];\r\n\r\nexport const SCALES = [\r\n  {\r\n    name: \"Minor\",\r\n    pattern: C_MINOR\r\n  },\r\n  {\r\n    name: \"Harmonic minor\",\r\n    pattern: C_HARMONIC_MINOR\r\n  }\r\n];\r\n\r\nexport const getLabelForNote = noteIndex => {\r\n  return NOTES[noteIndex];\r\n};\r\n\r\nexport const filterNotesByScale = (notes, scalePattern) => {\r\n  return notes.map(note => (scalePattern.includes(note) ? note : null));\r\n};\r\n\r\nexport const getNotesForFrets = (startNote, fretsCount) => {\r\n  const notes = [];\r\n\r\n  for (let index = 0; index < fretsCount + 1; index++) {\r\n    notes.push((index + startNote) % (NOTES_COUNT - 1));\r\n  }\r\n\r\n  return notes;\r\n};\r\n","import React, { useState } from \"react\";\n\nimport {\n  NOTES_COUNT,\n  SCALES,\n  NOTES,\n  filterNotesByScale,\n  getNotesForFrets,\n  getLabelForNote\n} from \"./utils.js\";\n\nimport \"./App.css\";\n\nconst TUNING = [4, 11, 7, 2, 9, 4];\nconst FRETS_COUNT = 24;\n\nconst App = () => {\n  const [scale, setScale] = useState(0);\n  const [root, setRoot] = useState(0);\n\n  const { pattern } = SCALES[scale];\n\n  const frets = TUNING.map(startNote =>\n    filterNotesByScale(\n      getNotesForFrets(startNote, FRETS_COUNT),\n      pattern.map(note => (note + root) % (NOTES_COUNT - 1))\n    ).map(getLabelForNote)\n  );\n  console.log(scale, root);\n  return (\n    <>\n      <select\n        value={scale}\n        onChange={event => setScale(Number(event.target.value))}\n      >\n        {SCALES.map(({ name }, index) => (\n          <option value={index}>{name}</option>\n        ))}\n      </select>\n\n      <select\n        value={root}\n        onChange={event => setRoot(Number(event.target.value))}\n      >\n        {NOTES.map((note, index) => (\n          <option value={index}>{note}</option>\n        ))}\n      </select>\n\n      <div className={\"frets\"}>\n        <div className={\"fret\"}>\n          {TUNING.map((_, stringIndex) => (\n            <div className={\"note\"}>\n              <div className={\"label\"}>\n                {getLabelForNote(TUNING[stringIndex])}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {frets[0].slice(1).map((_, fretIndex) => (\n          <div className={\"fret\"}>\n            {frets.map((_, stringIndex) => (\n              <div className={\"note\"}>\n                <div className={\"label\"}>\n                  {frets[stringIndex][fretIndex + 1]}\n                </div>\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}