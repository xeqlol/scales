{"version":3,"sources":["utils/index.ts","components/Bridge/index.tsx","components/Frets/index.tsx","components/Neck/index.tsx","components/RootSelector/index.tsx","components/ScaleSelector/index.tsx","components/FretsCountSelector/index.tsx","components/App/index.tsx","index.tsx"],"names":["NOTES","NOTES_COUNT","length","SCALES","name","pattern","FRETS_COUNTS","getLabelForNote","noteIndex","Bridge","strings","tuning","bridgeNotes","map","className","note","index","key","includes","Frets","slice","_","fretIndex","stringIndex","Neck","RootSelector","root","onChange","value","event","Number","target","ScaleSelector","scale","FretsCountSelector","fretsCount","count","TUNING","App","useState","setScale","setRoot","setFretsCount","startNote","notes","scalePattern","filterNotesByScale","push","getNotesForFrets","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b63fcd95.chunk.js","sourcesContent":["export const NOTES = [\n  \"C\",\n  \"C#\",\n  \"D\",\n  \"D#\",\n  \"E\",\n  \"F\",\n  \"F#\",\n  \"G\",\n  \"G#\",\n  \"A\",\n  \"A#\",\n  \"B\",\n  \"B#\"\n];\n\nexport const NOTES_COUNT = NOTES.length;\n\nconst C_HARMONIC_MINOR = [0, 2, 3, 5, 7, 8, 11];\nconst C_MINOR = [0, 2, 3, 5, 7, 8, 10];\n\nexport const SCALES = [\n  {\n    name: \"Minor\",\n    pattern: C_MINOR\n  },\n  {\n    name: \"Harmonic minor\",\n    pattern: C_HARMONIC_MINOR\n  }\n];\n\nexport const FRETS_COUNTS = [12, 18, 22, 24];\n\nexport const getLabelForNote = (noteIndex: number) => {\n  return NOTES[noteIndex];\n};\n\nexport const filterNotesByScale = (notes: number[], scalePattern: number[]) => {\n  return notes.map(note => (scalePattern.includes(note) ? note : null));\n};\n\nexport const getNotesForFrets = (startNote: number, fretsCount: number) => {\n  const notes = [];\n\n  for (let index = 0; index < fretsCount + 1; index++) {\n    notes.push((index + startNote) % (NOTES_COUNT - 1));\n  }\n\n  return notes;\n};\n","import React from \"react\";\n\nimport { getLabelForNote } from \"../../utils\";\n\nimport \"./styles.css\";\n\nexport const Bridge: React.FC<{\n  strings: (number | null)[][];\n  tuning: number[];\n}> = ({ strings, tuning }) => {\n  const bridgeNotes = strings.map(([note]) => note);\n\n  return (\n    <div className={\"bridge\"}>\n      {tuning.map((note, index) => (\n        <div className={\"bridge-note\"} key={index}>\n          <div\n            className={\n              bridgeNotes.includes(note)\n                ? \"bridge-label-active\"\n                : \"bridge-label\"\n            }\n          >\n            {getLabelForNote(note)}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { getLabelForNote } from \"../../utils\";\n\nimport \"./styles.css\";\n\nexport const Frets: React.FC<{ strings: (number | null)[][] }> = ({\n  strings\n}) => (\n  <>\n    {strings[0].slice(1).map((_, fretIndex) => (\n      <div className={\"fret\"} key={fretIndex}>\n        <div className={\"fret-index\"}>{fretIndex + 1}</div>\n        <div className={\"fret-notes\"}>\n          {strings.map((_, stringIndex) => {\n            const note = strings[stringIndex][fretIndex + 1];\n\n            return (\n              <div className={\"note\"} key={stringIndex}>\n                {note !== null ? (\n                  <div className={\"label\"}>{getLabelForNote(note)}</div>\n                ) : null}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    ))}\n  </>\n);\n","import React from \"react\";\n\nimport { Bridge } from \"../Bridge\";\nimport { Frets } from \"../Frets\";\n\nimport \"./styles.css\";\n\nexport const Neck: React.FC<{\n  strings: (number | null)[][];\n  tuning: number[];\n}> = ({ strings, tuning }) => (\n  <div className={\"frets\"}>\n    <Bridge strings={strings} tuning={tuning} />\n    <Frets strings={strings} />\n  </div>\n);\n","import React from \"react\";\n\nimport { NOTES } from \"../../utils\";\n\nexport const RootSelector: React.FC<{\n  root: number;\n  onChange: (value: number) => void;\n}> = ({ root, onChange }) => (\n  <select value={root} onChange={event => onChange(Number(event.target.value))}>\n    {NOTES.map((note, index) => (\n      <option value={index} key={index}>\n        {note}\n      </option>\n    ))}\n  </select>\n);\n","import React from \"react\";\n\nimport { SCALES } from \"../../utils\";\n\nexport const ScaleSelector: React.FC<{\n  scale: number;\n  onChange: (value: number) => void;\n}> = ({ scale, onChange }) => (\n  <select\n    value={scale}\n    onChange={event => onChange(Number(event.target.value))}\n  >\n    {SCALES.map(({ name }, index) => (\n      <option value={index} key={index}>\n        {name}\n      </option>\n    ))}\n  </select>\n);\n","import React from \"react\";\n\nimport { FRETS_COUNTS } from \"../../utils\";\n\nexport const FretsCountSelector: React.FC<{\n  fretsCount: number;\n  onChange: (value: number) => void;\n}> = ({ fretsCount, onChange }) => (\n  <select\n    value={fretsCount}\n    onChange={event => onChange(Number(event.target.value))}\n  >\n    {FRETS_COUNTS.map((count, index) => (\n      <option value={count} key={index}>\n        {count}\n      </option>\n    ))}\n  </select>\n);\n","import React, { useState } from \"react\";\n\nimport {\n  NOTES_COUNT,\n  SCALES,\n  filterNotesByScale,\n  getNotesForFrets\n} from \"../../utils\";\n\nimport { Neck } from \"../Neck\";\nimport { RootSelector } from \"../RootSelector\";\nimport { ScaleSelector } from \"../ScaleSelector\";\nimport { FretsCountSelector } from \"../FretsCountSelector\";\n\nimport \"./App.css\";\n\nconst TUNING = [4, 11, 7, 2, 9, 4]; // TODO: make selector for tuning\n\nconst App = () => {\n  const [scale, setScale] = useState(0);\n  const [root, setRoot] = useState(0);\n  const [fretsCount, setFretsCount] = useState(22);\n\n  const { pattern } = SCALES[scale];\n\n  const strings = TUNING.map(startNote =>\n    filterNotesByScale(\n      getNotesForFrets(startNote, fretsCount),\n      pattern.map(note => (note + root) % (NOTES_COUNT - 1))\n    )\n  );\n\n  return (\n    <>\n      <ScaleSelector scale={scale} onChange={value => setScale(value)} />\n      <RootSelector root={root} onChange={value => setRoot(value)} />\n      <FretsCountSelector\n        fretsCount={fretsCount}\n        onChange={value => setFretsCount(value)}\n      />\n\n      <Neck strings={strings} tuning={TUNING} />\n    </>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\n\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}